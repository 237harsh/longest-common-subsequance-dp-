class Solution {
public:
      int fun(int i1,int i2,string &s1, string &s2,vector<vector<int>>&dp)
{
    if(i1<0||i2<0)return 0;
    if(dp[i1][i2]!=-1)return dp[i1][i2];
    
 int take=INT_MIN,ntake=INT_MIN;
      
    if(s1[i1]==s2[i2])
    {
      take = 1+fun(i1-1,i2-1,s1,s2,dp);
    }
   else
   {
     ntake=0+ max(fun(i1-1,i2,s1,s2,dp),fun(i1,i2-1,s1,s2,dp));
   }
  return dp[i1][i2]=max(take,ntake);
}

    int longestCommonSubsequence(string s1, string s2) {
        int l1=s1.size(),l2=s2.size();
      /* vector<vector<int>>dp(l1+1,vector<int>(l2+1,-1));
      return  fun(l1-1,l2-1,s1,s2,dp);
       */
        //tabulation 
        vector<vector<int>>dp(l1+1,vector<int>(l2+1,-1));
        //shift index by 1 so that -1 becones 0;
        for(int i=0;i<=l1;i++)
        dp[i][0]=0;
        for(int i=0;i<=l2;i++)
             dp[0][i]=0;
        
        for(int i=1;i<=l1;i++){
            for(int j=1;j<=l2;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    dp[i][j]= 1+dp[i-1][j-1];
                    
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
            }
        return dp[l1][l2];
    }
};
